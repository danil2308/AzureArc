name: Pull down eve os image

on:
  push:
    paths:
      - 'eveos\**-values.yaml'

  workflow_dispatch:
    inputs:
      tags:
        description: "Specify Tag (optional)"
        required: false
env:
  CONTAINER_REGISTRY_NAME: ghcr.io
  EVE_OS_RELATIVE_LOCATION: eveos
  EVE_OS_CONTAINER_REGISTRY: lfedge

jobs:
  build-and-push:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Fetches entire history, so we can analyze commits since last tag.
          fetch-depth: 0

      # We need a predictable tag version, so let's serialize the workflows from this point.
      - name: Turnstyle
        if: github.event.inputs.tags || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release' || github.ref == 'refs/heads/develop'
        uses: softprops/turnstyle@v1
        with:
          same-branch-only: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine next tag
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release'
        id: next_tag
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: master
          # RELEASE_BRANCHES: main
          PRERELEASE_SUFFIX: prerelease
          DRY_RUN: true

      - name: Determine next tag
        if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/release'
        id: next_tag_dev
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: master
          # RELEASE_BRANCHES: main
          PRERELEASE_SUFFIX: development
          DRY_RUN: true
      
      - id: eve-os-info-prod
        if: github.ref == 'refs/heads/master'
        run: |
          echo "::set-output name=imageversion::$(yq '.image.version' ${{ env.EVE_OS_RELATIVE_LOCATION }}/production-values.yaml)\n"
          echo "::set-output name=imagerepository::$(yq '.image.repository' ${{ env.EVE_OS_RELATIVE_LOCATION }}/production-values.yaml)\n"
        env:
          ENV: sandbox
      - name: env-mapping-prod
        if: github.ref == 'refs/heads/master'
        run: |
          echo "imageversion=${{ steps.eve-os-info-prod.outputs.imageversion }}" >> $GITHUB_ENV
          echo "imagerepository=${{ steps.eve-os-info-prod.outputs.imagerepository }}" >> $GITHUB_ENV

      - id: eve-os-info-nonprod
        if: github.ref == 'refs/heads/release'
        run: |
          echo "::set-output name=imageversion::$(yq '.image.version' ${{ env.EVE_OS_RELATIVE_LOCATION }}/nonprod-values.yaml)\n"
          echo "::set-output name=imagerepository::$(yq '.image.repository' ${{ env.EVE_OS_RELATIVE_LOCATION }}/nonprod-values.yaml)\n"
      - name: env-mapping-nonprod
        if: github.ref == 'refs/heads/release'
        run: |
          echo "imageversion=${{ steps.eve-os-info-nonprod.outputs.imageversion }}" >> $GITHUB_ENV
          echo "imagerepository=${{ steps.eve-os-info-nonprod.outputs.imagerepository }}" >> $GITHUB_ENV

      - id: eve-os-info-sandbox
        if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/release'
        run: |
          echo "::set-output name=imageversion::$(yq '.image.version' ${{ env.EVE_OS_RELATIVE_LOCATION }}/sandbox-values.yaml)\n"
          echo "::set-output name=imagerepository::$(yq '.image.repository' ${{ env.EVE_OS_RELATIVE_LOCATION }}/sandbox-values.yaml)\n"
      - name: env-mapping-sandbox
        if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/release'
        run: |
          echo "imageversion=${{ steps.eve-os-info-sandbox.outputs.imageversion }}" >> $GITHUB_ENV
          echo "imagerepository=${{ steps.eve-os-info-sandbox.outputs.imagerepository }}" >> $GITHUB_ENV

      - name: Docker Login to GitHub Container Registry
        run: |
          echo ${{ secrets.READ_WRITE_GITHUB_PACKAGES_PAT }} | docker login ${{ env.CONTAINER_REGISTRY_NAME }} --username ${{ secrets.READ_WRITE_GITHUB_PACKAGES_USER }} --password-stdin

      # Pull the EVE-OS Docker image for sandbox
      - name: pull the Docker image for sandbox
        if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/release'
        run: |
          docker pull ${{ env.imagerepository }}:${{ env.imageversion }}

      # Pull the EVE-OS Docker image for pre-release(nonprod).
      - name: Build the Docker image for pre-release
        if: github.ref == 'refs/heads/release'
        run: |
          docker pull ${{ env.imagerepository }}:${{ env.imageversion }}

      # Pull the EVE-OS Docker image for release(production).
      - name: Build the Docker image for release.
        if: github.ref == 'refs/heads/master'
        run: |
          docker pull ${{ env.imagerepository }}:${{ env.imageversion }}

      # If the branch has an environment, then we're creating a release...
      # We need a predictable tag version, so let's serialize the workflows from this point.
      - uses: ./.github/actions/common-outputs
        if: github.event.inputs.tags || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release' || github.ref == 'refs/heads/develop'
        id: common

      - name: Re-tag and push the Docker image
        if: github.event.inputs.tags || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release' || github.ref == 'refs/heads/develop'
        run: |
          docker tag ${{ env.imagerepository }}:${{ env.imageversion }} ${DOCKER_TAG}:${BUILD_VERSION}
          docker push ${DOCKER_TAG}:${BUILD_VERSION}
        env:
          DOCKER_TAG: ${{ steps.common.outputs.container-registry-docker-tag }}
          BUILD_VERSION: ${{ github.event.inputs.tags || steps.next_tag.outputs.new_tag || steps.next_tag_dev.outputs.new_tag }}
